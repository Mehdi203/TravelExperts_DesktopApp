using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;
using TravelExpert_ThreadedProject3.Models;

namespace TravelExpert_ThreadedProject3
{
    public partial class AddProducts_SuppliersForm : Form
    {
        //GL
        public ProductsSupplier ProductsSupplier { get; set; }
        public bool AddProductsSupplier { get; set; }

        //DB context
        private TravelExpertsContext context = new TravelExpertsContext();

        public AddProducts_SuppliersForm()
        {
            InitializeComponent();
        }

        private void AddProducts_SuppliersForm_Load(object sender, EventArgs e)
        {

            //Control
            // Load all Product/Supplier codes 
            Object[] pIds = context.Products.Select(p => (Object)p.ProductId.ToString()+"-"+p.ProdName).ToArray();
            Object[] sIds = context.Suppliers.Select(s => (Object)s.SupplierId.ToString() + "-" + s.SupName).ToArray();
            cmbProductId.Items.AddRange(pIds);
            cmbSupplierId.Items.AddRange(sIds);
            //DisplayProduct_Supplier(); // Display the Product/Supplier data

        }

        private void LoadProductsSupplierData()
        {
            //ProductsSupplier.ProductSupplierId = Convert.ToInt32(textBox_Id.Text); //This is autogenerated
            ProductsSupplier.ProductId = Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(cmbProductId.SelectedItem.ToString(), @"[^0-9]+", ""));

            ProductsSupplier.SupplierId = Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(cmbSupplierId.SelectedItem.ToString(), @"[^0-9]+", ""));
                //cmbSupplierId[selectedSupplierId];
        }

        private void btnAccept_Click_1(object sender, EventArgs e)
        {
            // initialize the ProductsSupplier property with new ProductsSupplier object
            if (IsValidData())
            {
                this.ProductsSupplier = new ProductsSupplier();
                this.LoadProductsSupplierData();
                this.DialogResult = DialogResult.OK;
            }
        }

        private bool IsValidData()
        {
            bool success = true;
            string errorMessage = "";
            // Check if not null
            if (cmbProductId.SelectedItem is null)
                errorMessage += Validator.IsPresent("", cmbProductId.Tag.ToString());
            //errorMessage += Validator.IsPresent(comboBoxPackage.SelectedItem.ToString(), comboBoxPackage.Tag.ToString());

            if (cmbSupplierId.SelectedItem is null)
                errorMessage += Validator.IsPresent("", cmbSupplierId.Tag.ToString());

            // Check if already exist
            if (errorMessage == "")
            {
                int productidsearch = Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(cmbProductId.SelectedItem.ToString(), @"[^0-9]+", ""));
                int supplieridsearch = Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(cmbSupplierId.SelectedItem.ToString(), @"[^0-9]+", ""));
                var prodSuppId = context.ProductsSuppliers
                    .Where(p => p.ProductId == productidsearch)
                    .Where(s => s.SupplierId == supplieridsearch).ToList();
                if (prodSuppId.Count() > 0)
                    errorMessage += "Record exists with duplicate Product ID and Supplier ID, cannot add.";

            }

            if (errorMessage != "")
            {
                success = false;
                MessageBox.Show(errorMessage, "Entry Error");
            }
            return success;

        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }



        //GL

    }
}
